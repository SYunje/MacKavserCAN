#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Kvaser CAN 좌우 조향각 제어 프로그램
ID 0x2B0(688) 메시지의 SAS_Angle 값을 조작하여 좌측으로 갔다가 우측으로 가게 합니다.
"""
import signal
import sys
import time
from typing import List

# KvaserCAN 클래스 임포트
from kvaser_can import KvaserCAN

# 전역 변수
can = None
running = True
sent_count = 0
start_time = None


def signal_handler(signum, frame):
    """
    SIGINT, SIGTERM 시그널 핸들러
    프로그램 종료 시 CAN 채널을 닫고 통계를 출력합니다.
    """
    global running, sent_count, start_time, can
    print("\n프로그램 종료 요청됨...")
    running = False

    if start_time is not None:
        elapsed_time = time.time() - start_time
        rate = sent_count / elapsed_time if elapsed_time > 0 else 0
        print(f"\n송신 통계:")
        print(f"  전송된 메시지: {sent_count}")
        print(f"  소요 시간: {elapsed_time:.2f}초")
        print(f"  초당 메시지: {rate:.2f} msgs/sec")

    if can is not None:
        print("\nCAN 채널 닫는 중...")
        can.close()

    sys.exit(0)


def create_sas1_message(angle: float, speed: int = 0, status: int = 0, msg_count: int = 0) -> List[int]:
    """
    SAS1 메시지 데이터 생성

    BO_ 688 SAS1: 8 XXX
      SG_ SAS_Angle : 0|16@1+ (0.1,0) [-3276.8|3276.7] "Deg" XXX
      SG_ SAS_Speed : 16|8@1+ (4,0) [0|1016] "" XXX
      SG_ SAS_Stat : 24|8@1+ (1,0) [0|255] "" XXX
      SG_ MsgCount : 32|4@1+ (1,0) [0|15] "" XXX
      SG_ CheckSum : 36|4@1+ (1,0) [0|15] "" XXX

    Args:
        angle: 조향각 (도) - [-3276.8, 3276.7] 범위
        speed: 조향 속도 - [0, 1016] 범위
        status: 상태 - [0, 255] 범위
        msg_count: 메시지 카운터 - [0, 15] 범위

    Returns:
        8바이트 CAN 메시지 데이터 (리스트)
    """
    # 값 범위 제한
    angle = max(-3276.8, min(3276.7, angle))
    speed = max(0, min(255, speed))
    status = max(0, min(255, status))
    msg_count = max(0, min(15, msg_count))

    # SAS_Angle 계산 (0.1 스케일, 오프셋 0)
    # 음수 각도를 처리하기 위한 2의 보수 계산
    angle_raw = int(angle * 10)
    if angle_raw < 0:
        angle_raw = 65536 + angle_raw  # 16비트 2의 보수

    # 메시지 데이터 생성 (8바이트)
    data = [0] * 8

    # 바이트 1-2: SAS_Angle (16비트)
    data[0] = angle_raw & 0xFF  # 하위 바이트
    data[1] = (angle_raw >> 8) & 0xFF  # 상위 바이트

    # 바이트 3: SAS_Speed (8비트)
    data[2] = speed & 0xFF

    # 바이트 4: SAS_Stat (8비트)
    data[3] = status & 0xFF

    # 바이트 5: MsgCount(4비트) + CheckSum(4비트)
    # 간단한 체크섬 계산 (첫 4바이트의 XOR)
    checksum = (data[0] ^ data[1] ^ data[2] ^ data[3]) & 0xF
    data[4] = ((msg_count & 0xF) << 4) | (checksum & 0xF)

    # 나머지 바이트 (5-8)는 0으로 설정
    data[5] = 0
    data[6] = 0
    data[7] = 0

    return data


def main():
    """
    메인 함수 - 좌우 패턴 생성
    """
    global can, running, sent_count, start_time

    # 설정 값
    CHANNEL = 0  # CAN 채널 번호
    BITRATE = -2  # 비트레이트 인덱스 (-2 = 500kbps)
    CAN_ID = 0x2B0  # CAN 메시지 ID (688 십진수)

    # 좌우 패턴 설정
    LEFT_ANGLE = -45  # 좌측 최대 조향각 (도)
    RIGHT_ANGLE = 45  # 우측 최대 조향각 (도)
    STRAIGHT_ANGLE = 0  # 중립 조향각 (도)

    CYCLE_TIME = 0  # 메시지 송신 간격 없음 (최대 속도로 전송)

    # 각 상태에 머무는 시간 (초)
    LEFT_DURATION = 5.0  # 좌측에 머무는 시간
    RIGHT_DURATION = 5.0  # 우측에 머무는 시간
    TRANSITION_DURATION = 2.0  # 좌/우로 이동하는 시간

    TRANSMIT_COUNT = 9999999  # 송신할 메시지 개수

    # 시그널 핸들러 등록
    signal.signal(signal.SIGINT, signal_handler)  # Ctrl+C
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        print("Kvaser CAN 좌우 조향각 제어 시작")
        print(f"ID: 0x2B0 (SAS1), 비트레이트: 500kbps")
        print(f"좌측 조향각: {LEFT_ANGLE}°, 우측 조향각: {RIGHT_ANGLE}°")
        print(f"좌측 유지 시간: {LEFT_DURATION}초, 우측 유지 시간: {RIGHT_DURATION}초")
        print(f"이동 시간: {TRANSITION_DURATION}초")

        # KvaserCAN 인스턴스 생성
        can = KvaserCAN()
        print(f"드라이버 버전: {can.version}")

        # CAN 채널 열기
        print(f"채널 {CHANNEL} 여는 중...")
        result = can.open(channel=CHANNEL)
        if result != 0:
            sys.exit(f"오류: CAN 채널 열기 실패 (코드: {result})")

        # CAN 컨트롤러 시작 (500kbps)
        print("CAN 컨트롤러 시작 중...")
        result = can.start(bitrate_index=BITRATE)
        if result != 0:
            can.close()
            sys.exit(f"오류: CAN 컨트롤러 시작 실패 (코드: {result})")

        # CAN 상태 확인
        result, status = can.get_status()
        if result == 0 and status:
            print(f"CAN 상태: 0x{status.byte:02X}")

        # 메시지 송신 시작
        print("\n좌우 조향각 제어 시작")
        print("(중단하려면 Ctrl+C를 누르세요)")

        start_time = time.time()
        sent_count = 0
        msg_count = 0

        # 상태 변수
        current_state = "LEFT"  # 초기 상태: 좌측으로 움직임
        state_start_time = start_time

        # 메시지 송신 루프
        while running and sent_count < TRANSMIT_COUNT:
            current_time = time.time()
            elapsed_in_state = current_time - state_start_time

            # 상태에 따른 조향각 계산
            angle = 0
            speed = 0

            if current_state == "LEFT":
                # 좌측으로 이동 중
                if elapsed_in_state < TRANSITION_DURATION:
                    # 중립에서 좌측으로 전환 중
                    progress = elapsed_in_state / TRANSITION_DURATION
                    angle = STRAIGHT_ANGLE + (LEFT_ANGLE - STRAIGHT_ANGLE) * progress
                    speed = abs(LEFT_ANGLE - STRAIGHT_ANGLE) / TRANSITION_DURATION / 4
                else:
                    # 좌측에 도달
                    angle = LEFT_ANGLE
                    speed = 0

                    # 좌측에 지정 시간만큼 머물렀으면 우측으로 전환
                    if elapsed_in_state >= TRANSITION_DURATION + LEFT_DURATION:
                        current_state = "RIGHT"
                        state_start_time = current_time

            elif current_state == "RIGHT":
                # 우측으로 이동 중
                if elapsed_in_state < TRANSITION_DURATION:
                    # 좌측에서 우측으로 전환 중
                    progress = elapsed_in_state / TRANSITION_DURATION
                    angle = LEFT_ANGLE + (RIGHT_ANGLE - LEFT_ANGLE) * progress
                    speed = abs(RIGHT_ANGLE - LEFT_ANGLE) / TRANSITION_DURATION / 4
                else:
                    # 우측에 도달
                    angle = RIGHT_ANGLE
                    speed = 0

                    # 우측에 지정 시간만큼 머물렀으면 좌측으로 전환
                    if elapsed_in_state >= TRANSITION_DURATION + RIGHT_DURATION:
                        current_state = "LEFT"
                        state_start_time = current_time

            # 메시지 카운터 증가 (0-15 순환)
            msg_count = (msg_count + 1) & 0xF

            # SAS1 메시지 데이터 생성
            data = create_sas1_message(angle=angle, speed=int(speed), status=0, msg_count=msg_count)

            # 메시지 송신
            result = can.send(
                msg_id=CAN_ID,
                data=data,
                extended_id=False,
                remote_frame=False
            )

            if result != 0:
                if result == -20:  # CANERR_TX_BUSY
                    time.sleep(0.001)  # 1ms 대기 후 재시도
                    continue
                print(f"오류: 메시지 송신 실패 (코드: {result})")
                break

            sent_count += 1

            # 진행 상태 표시 (100개 메시지마다)
            if sent_count % 100 == 0:
                print(f"\r현재 조향각: {angle:.1f}° ({current_state} 상태, 송신: {sent_count}개)", end="")

            # 지정된 간격만큼 대기
            time.sleep(CYCLE_TIME)

        # 송신 완료 메시지
        elapsed_time = time.time() - start_time
        rate = sent_count / elapsed_time if elapsed_time > 0 else 0
        print(f"\n\n송신 완료:")
        print(f"  전송된 메시지: {sent_count}")
        print(f"  소요 시간: {elapsed_time:.2f}초")
        print(f"  초당 메시지: {rate:.2f} msgs/sec")

    except Exception as e:
        print(f"오류 발생: {e}")

    finally:
        # CAN 채널 닫기
        if can is not None:
            print("\nCAN 채널 닫는 중...")
            can.close()


if __name__ == "__main__":
    main()
